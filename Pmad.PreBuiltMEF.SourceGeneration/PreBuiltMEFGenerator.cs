using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Pmad.PreBuiltMEF.SourceGeneration.Model;

namespace Pmad.PreBuiltMEF.SourceGeneration
{
    [Generator(LanguageNames.CSharp)]
    public class PreBuiltMEFSourceGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // Étape 1 : Filtrer les classes avec ExportAttribute, ImportingConstructorAttribute,
            // ou une propriété avec ImportAttribute ou ExportAttribute
            var exportedClasses = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: (node, _) => PartModel.IsTargeted(node),
                    transform: (ctx, _) =>
                    {
                        var classDecl = (Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)ctx.Node;
                        var symbol = ctx.SemanticModel.GetDeclaredSymbol(classDecl) as INamedTypeSymbol;
                        if (symbol == null)
                            return null;
                        return PartModel.Create(symbol);
                    })
                .Where(c => c != null)
                .Collect();

            var assemblyNameProvider = context.CompilationProvider.Select((compilation, _) => compilation.AssemblyName);

            // Étape 2 : Générer le code d'appel à PreCompiledCatalogBuilder
            context.RegisterSourceOutput(assemblyNameProvider.Combine(exportedClasses), (spc, tuple) =>
            {
                var parts = tuple.Right;
                if (parts.IsDefaultOrEmpty)
                {
                    // Si aucune classe exportée, on ne génère rien
                    return;
                }

                // Récupération du nom de l'assembly en cours de compilation

                var sb = new System.Text.StringBuilder();
                sb.AppendLine("// This file is auto-generated by Pmad.PreBuiltMEF.SourceGeneration");
                sb.AppendLine("#nullable enable");
                sb.AppendLine($"namespace {tuple.Left}");
                sb.AppendLine("{");
                sb.AppendLine("public static class _PreBuiltMEF");
                sb.AppendLine("{");
                sb.AppendLine("public static void RegisterAllParts(Pmad.PreBuiltMEF.PreBuiltCatalogBuilder builder)");
                sb.AppendLine("{");

                foreach (var part in parts)
                {
                    WritePart(sb, part!);
                    sb.AppendLine();
                }

                sb.AppendLine("}");
                sb.AppendLine("}");
                sb.AppendLine("}");

                spc.AddSource("_PreBuiltMEF.g.cs", sb.ToString());
            });
        }

        private static void WritePart(System.Text.StringBuilder sb, PartModel part)
        {

            if (part.ImportingConstructorParameters != null)
            {
                var sbAddImports = new System.Text.StringBuilder();

                sb.Append($"builder.AddPart<{part.Type}>(scope => new {part.Type}(");
                bool isFirst = true;
                int index = 0;
                foreach (var param in part.ImportingConstructorParameters)
                {
                    if (!isFirst)
                    {
                        sb.Append(", ");
                    }
                    else
                    {
                        isFirst = false;
                    }
                    sb.Append($"({param.ParamType})scope[{index}]");
                    var method = "AddImportFromConstructor";
                    if (param.AllowDefault)
                    {
                        method = "AddOptionalImportFromConstructor";
                    }
                    if (string.IsNullOrEmpty(param.ContractName))
                    {
                        sbAddImports.AppendLine();
                        sbAddImports.Append($".{method}<{param.Type}>()");
                    }
                    else
                    {
                        sbAddImports.AppendLine();
                        sbAddImports.Append($".{method}<{param.Type}>(\"{param.ContractName}\")");
                    }
                    index++;
                }
                sb.Append("))");
                sb.Append(sbAddImports);
            }
            else
            {
                sb.Append($"builder.AddPart<{part.Type}>()");
            }

            foreach (var metadata in part.Metadata)
            {
                sb.AppendLine();
                sb.Append($".AddMetadata({metadata.Key},{metadata.Value})");
            }

            foreach (var partExport in part.PartExports)
            {

                if (!string.IsNullOrEmpty(partExport.ContractName))
                {
                    sb.AppendLine();
                    sb.Append($".AddExport<{partExport.Type}>(\"{partExport.ContractName}\", part => part)");
                }
                else
                {
                    sb.AppendLine();
                    sb.Append($".AddExport<{partExport.Type}>(part => part)");
                }
            }

            foreach (var memberExport in part.MemberExports)
            {
                if (!string.IsNullOrEmpty(memberExport.ContractName))
                {
                    sb.AppendLine();
                    sb.Append($".AddExport<{memberExport.Type}>(\"{memberExport.ContractName}\", part => part.{memberExport.Name})");
                }
                else
                {
                    sb.AppendLine();
                    sb.Append($".AddExport<{memberExport.Type}>(part => part.{memberExport.Name})");
                }
            }

            foreach (var memberImport in part.MemberImports)
            {
                var method = "AddImport";
                if (memberImport.AllowDefault)
                {
                    method = "AddOptionalImport";
                }
                if (!string.IsNullOrEmpty(memberImport.ContractName))
                {
                    sb.AppendLine();
                    sb.Append($".{method}<{memberImport.Type}>(\"{memberImport.ContractName}\", (part, value) => part.{memberImport.Name} = value)");
                }
                else
                {
                    sb.AppendLine();
                    sb.Append($".{method}<{memberImport.Type}>((part, value) => part.{memberImport.Name} = value)");
                }
            }

            sb.AppendLine($";");
        }
    }
}
