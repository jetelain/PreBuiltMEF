using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Pmad.PreBuiltMEF.SourceGeneration.Model;

namespace Pmad.PreBuiltMEF.MsDependencyInjection.SourceGeneration
{
    [Generator(LanguageNames.CSharp)]
    public class PreBuiltMEFSourceGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var exportedClasses = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: (node, _) => PartModel.IsTargeted(node),
                    transform: (ctx, _) =>
                    {
                        var classDecl = (Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)ctx.Node;
                        var symbol = ctx.SemanticModel.GetDeclaredSymbol(classDecl) as INamedTypeSymbol;
                        if (symbol == null)
                            return null;
                        return PartModel.Create(symbol);
                    })
                .Where(c => c != null)
                .Collect();

            var assemblyNameProvider = context.CompilationProvider.Select((compilation, _) => compilation.AssemblyName);

            context.RegisterSourceOutput(assemblyNameProvider.Combine(exportedClasses), (spc, tuple) =>
            {
                var parts = tuple.Right;
                if (parts.IsDefaultOrEmpty)
                {
                    return;
                }

                var sb = new System.Text.StringBuilder();
                sb.AppendLine("// This file is auto-generated by Pmad.PreBuiltMEF.MsDependencyInjection.SourceGeneration");
                sb.AppendLine("#nullable enable");
                sb.AppendLine($"using Pmad.PreBuiltMEF.MsDependencyInjection;");
                sb.AppendLine($"namespace {tuple.Left}");
                sb.AppendLine("{");
                sb.AppendLine("public static class _PreBuiltMsDI");
                sb.AppendLine("{");
                sb.AppendLine("public static void RegisterAllParts(Microsoft.Extensions.DependencyInjection.IServiceCollection services)");
                sb.AppendLine("{");

                foreach (var part in parts)
                {
                    WritePart(sb, part!);
                    sb.AppendLine();
                }

                sb.AppendLine("}");
                sb.AppendLine("}");
                sb.AppendLine("}");

                spc.AddSource("_PreBuiltMsDI.g.cs", sb.ToString());
            });
        }

        private static void WritePart(System.Text.StringBuilder sb, PartModel part)
        {
            sb.AppendLine($"services.AddPart<{part.Type}>(sp =>");
            sb.AppendLine("{");
            sb.Append($"  var part = new {part.Type}(");
            if (part.ImportingConstructorParameters != null)
            {
                bool isFirst = true;
                foreach (var param in part.ImportingConstructorParameters)
                {
                    if (!isFirst)
                    {
                        sb.Append(", ");
                    }
                    else
                    {
                        isFirst = false;
                    }
                    var method = "Import";
                    if (param.AllowDefault)
                    {
                        method = "OptionalImport";
                    }
                    if (string.IsNullOrEmpty(param.ContractName))
                    {
                        sb.Append($"sp.{method}<{param.Type}>()");
                    }
                    else
                    {
                        sb.Append($"sp.{method}<{param.Type}>(\"{param.ContractName}\")");
                    }
                }
            }

            sb.AppendLine($");");
            foreach (var memberImport in part.MemberImports)
            {
                var method = "Import";
                if (memberImport.AllowDefault)
                {
                    method = "OptionalImport";
                }
                if (!string.IsNullOrEmpty(memberImport.ContractName))
                {
                    sb.AppendLine($"  part.{memberImport.Name} = sp.{method}<{memberImport.Type}>(\"{memberImport.ContractName}\");");
                }
                else
                {
                    sb.AppendLine($"  part.{memberImport.Name} = sp.{method}<{memberImport.Type}>();");
                }
            }
            sb.AppendLine($"  return part;");
            sb.AppendLine($"}});");

            foreach (var partExport in part.PartExports)
            {
                if (!string.IsNullOrEmpty(partExport.ContractName))
                {
                    sb.AppendLine($"services.RegisterExport<{part.Type},{partExport.Type}>(\"{partExport.ContractName}\", part => part);");
                }
                else
                {
                    sb.AppendLine($"services.RegisterExport<{part.Type},{partExport.Type}>(part => part);");
                }
            }

            foreach (var memberExport in part.MemberExports)
            {
                if (!string.IsNullOrEmpty(memberExport.ContractName))
                {
                    sb.AppendLine($"services.RegisterExport<{part.Type},{memberExport.Type}>(\"{memberExport.ContractName}\", part => part.{memberExport.Name});");
                }
                else
                {
                    sb.AppendLine($"services.RegisterExport<{part.Type},{memberExport.Type}>(part => part.{memberExport.Name});");
                }
            }
        }
    }
}
