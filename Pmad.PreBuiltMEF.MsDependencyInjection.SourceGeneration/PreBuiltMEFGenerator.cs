using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Pmad.PreBuiltMEF.SourceGeneration.Model;

namespace Pmad.PreBuiltMEF.MsDependencyInjection.SourceGeneration
{
    [Generator(LanguageNames.CSharp)]
    public class PreBuiltMEFSourceGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var exportedClasses = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: (node, _) => PartModel.IsTargeted(node),
                    transform: (ctx, _) =>
                    {
                        var classDecl = (Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)ctx.Node;
                        if (!(ctx.SemanticModel.GetDeclaredSymbol(classDecl) is INamedTypeSymbol symbol))
                            return null;
                        return PartModel.Create(symbol);
                    })
                .Where(c => c != null)
                .Collect();

            var assemblyNameProvider = context.CompilationProvider.Select((compilation, _) => compilation.AssemblyName);

            context.RegisterSourceOutput(assemblyNameProvider.Combine(exportedClasses), (spc, tuple) =>
            {
                var parts = tuple.Right;
                if (parts.IsDefaultOrEmpty)
                {
                    return;
                }

                var sb = new System.Text.StringBuilder();
                sb.AppendLine("// This file is auto-generated by Pmad.PreBuiltMEF.MsDependencyInjection.SourceGeneration");
                sb.AppendLine("#nullable enable");
                sb.AppendLine($"using Pmad.PreBuiltMEF.MsDependencyInjection;");
                sb.AppendLine($"namespace {tuple.Left}");
                sb.AppendLine("{");
                sb.AppendLine("public static class _PreBuiltMsDI");
                sb.AppendLine("{");
                sb.AppendLine("  public static void RegisterAllParts(Microsoft.Extensions.DependencyInjection.IServiceCollection services)");
                sb.AppendLine("  {");

                var mapper = new MetadataMapperBuilder();

                foreach (var part in parts)
                {
                    WritePart(sb, part!, mapper);
                    sb.AppendLine();
                }


                sb.AppendLine("  }");

                mapper.AppendTo(sb);
                sb.AppendLine("}");
                sb.AppendLine("}");

                spc.AddSource("_PreBuiltMsDI.g.cs", sb.ToString());
            });
        }

        private static void WritePart(System.Text.StringBuilder sb, PartModel part, MetadataMapperBuilder mapper)
        {
            sb.AppendLine($"    services.AddPart<{part.Type}>(sp =>");
            sb.AppendLine("    {");
            sb.Append($"      var part = new {part.Type}(");
            if (part.ImportingConstructorParameters != null)
            {
                bool isFirst = true;
                foreach (var param in part.ImportingConstructorParameters)
                {
                    if (!isFirst)
                    {
                        sb.Append(", ");
                    }
                    else
                    {
                        isFirst = false;
                    }
                    sb.Append($"({param.ParamType})");
                    AppendImportCall(sb, mapper, param);
                }
            }

            sb.AppendLine(");");
            foreach (var memberImport in part.MemberImports)
            {
                sb.Append($"      part.{memberImport.Name} = ");
                AppendImportCall(sb, mapper, memberImport);
                sb.AppendLine(";");
            }
            sb.AppendLine("      return part;");
            sb.AppendLine("    });");

            foreach (var partExport in part.PartExports)
            {
                sb.Append($"    services.RegisterExport<{part.Type},{partExport.Type}>(");
                if (!string.IsNullOrEmpty(partExport.ContractName))
                {
                    sb.Append($"\"{partExport.ContractName}\", ");
                }
                sb.Append("part => part");
                if (partExport.Metadata != null && partExport.Metadata.Count > 0)
                {
                    sb.Append(", ");
                    MetadataHelper.AppendMetadata(sb, partExport.Metadata);
                }
                sb.AppendLine(");");
            }

            foreach (var memberExport in part.MemberExports)
            {
                sb.Append($"    services.RegisterExport<{part.Type},{memberExport.Type}>(");
                if (!string.IsNullOrEmpty(memberExport.ContractName))
                {
                    sb.Append($"\"{memberExport.ContractName}\", ");
                }
                sb.Append($"part => part.{memberExport.Name}");
                if (memberExport.Metadata != null && memberExport.Metadata.Count > 0)
                {
                    sb.Append(", ");
                    MetadataHelper.AppendMetadata(sb, memberExport.Metadata);
                }
                sb.AppendLine(");");
            }
        }

        private static void AppendImportCall(System.Text.StringBuilder sb, MetadataMapperBuilder mapper, ImportBase import)
        {
            var method = "Import";
            if (import.AllowDefault)
            {
                method = "OptionalImport";
            }
            if (import.Mode == ImportMode.Lazy)
            {
                method += "Lazy";
            }
            sb.Append($"sp.{method}<{import.GetGenericArgs()}>(");
            if (!string.IsNullOrEmpty(import.ContractName))
            {
                sb.Append($"\"{import.ContractName}\"");
            }
            if (import.Metadata != null)
            {
                if (!string.IsNullOrEmpty(import.ContractName))
                {
                    sb.Append(", ");
                }
                var impl = mapper.GetOrCreate(import.Metadata);
                sb.Append($"{impl}.Create, {impl}.IsValid");
            }
            sb.Append(")");
        }
    }
}
